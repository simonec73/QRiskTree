using Newtonsoft.Json;
using QRiskTree.Engine.Facts;

namespace QRiskTree.Engine.OpenFAIR
{
    [JsonObject(MemberSerialization.OptIn)]
    public class Vulnerability : NodeWithFacts
    {
        public Vulnerability() : base(RangeType.Percentage)
        {
        }

        public Vulnerability(string name) : base(name, RangeType.Percentage)
        {
        }

        protected override bool IsValidChild(Node node)
        {
            return (node is ThreatCapability && !(_children?.OfType<ThreatCapability>().Any() ?? false)) ||
                (node is ResistenceStrength && !(_children?.OfType<ResistenceStrength>().Any() ?? false));
        }

        protected override bool Simulate(uint iterations, out double[]? samples)
        {
            var result = false;
            samples = null;

            var threatCapability = _children?.OfType<ThreatCapability>().FirstOrDefault();
            var resistenceStrength = _children?.OfType<ResistenceStrength>().FirstOrDefault();

            if (threatCapability != null && resistenceStrength != null)
            {
                if (Simulate(threatCapability, iterations, out var tcSamples) && 
                    (tcSamples?.Length ?? 0) == iterations &&
                    Simulate(resistenceStrength, iterations, out var rsSamples) && 
                    (rsSamples?.Length ?? 0) == iterations)
                {
                    // Assign to samples 1 if the Threat Capability is higher than the Resistence Strength, otherwise zero.
                    samples = new double[iterations];
                    for (int i = 0; i < iterations; i++)
                    {
#pragma warning disable CS8602 // Dereference of a possibly null reference.
                        samples[i] = (tcSamples[i] > rsSamples[i]) ? 1.0 : 0.0;
#pragma warning restore CS8602 // Dereference of a possibly null reference.
                    }

                    result = true;
                }
            }

            return result;
        }
    }
}
