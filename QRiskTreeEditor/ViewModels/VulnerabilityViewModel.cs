using QRiskTree.Engine.Model;

namespace QRiskTreeEditor.ViewModels
{
    internal class VulnerabilityViewModel : NodeViewModel
    {
        public VulnerabilityViewModel(Vulnerability node, NodeViewModel parent, RiskModelViewModel model) 
            : base(node, parent, model)
        {
        }

        #region Children management.
        public ThreatCapabilityViewModel? AddThreatCapability(string name)
        {
            ThreatCapabilityViewModel? result = null;

            if (_node is Vulnerability vulnerability)
            {
                var tc = vulnerability.AddThreatCapability(name);
                if (tc != null)
                {
                    result = new ThreatCapabilityViewModel(tc, this, _model);
                    _components.Add(result);
                    result.InitializeFacts();
                    OnPropertyChanged(nameof(_components));
                    OnPropertyChanged(nameof(HasComponents));
                    OnPropertyChanged(nameof(HasChildren));
                }
            }
            
            return result;
        }

        public ResistenceStrengthViewModel? AddResistenceStrength(string name)
        {
            ResistenceStrengthViewModel? result = null;

            if (_node is Vulnerability vulnerability)
            {
                var rs = vulnerability.AddResistenceStrength(name);
                if (rs != null)
                {
                    result = new ResistenceStrengthViewModel(rs, this, _model);
                    _components.Add(result);
                    result.InitializeFacts();
                    OnPropertyChanged(nameof(_components));
                    OnPropertyChanged(nameof(HasComponents));
                    OnPropertyChanged(nameof(HasChildren));
                }
            }
            
            return result;
        }
        #endregion
    }
}
